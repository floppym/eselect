# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

DESCRIPTION="Manage contributed bash-completion scripts"
MAINTAINER="ka0ttic@gentoo.org"
SVN_DATE='$Date$'
VERSION=$(svn_date_to_version "${SVN_DATE}")

### show action ###

describe_show() {
	echo "Show currently enabled completions"
}

do_show() {
	local bc bcdir="${ROOT}/${HOME}/.bash_completion.d" n=0

	[[ ${1} == "--global" ]] && bcdir="${ROOT}/etc/bash_completion.d"

	write_list_start "Currently enabled completions:"

	for bc in ${bcdir}/* ; do
		[[ -e "${bc}" ]] || continue
		write_numbered_list_entry "$((++n))" "${bc##*/}"
	done

	[[ ${n} -eq 0 ]] && \
		write_kv_list_entry "No completions currently enabled" ""

	return 0
}

### list action ###

describe_list() {
	echo "List available completions"
}

do_list() {
	local bc bcdir="${ROOT}/${HOME}/.bash_completion.d" n=0
	local enabled_bcs=()

	[[ ${1} == "--global" ]] && bcdir="${ROOT}/etc/bash_completion.d"

	# get a list of enabled completions, so we can exclude them
	for bc in ${bcdir}/* ; do
		enabled_bcs[((n++))]="${bc##*/}"
	done

	write_list_start "Available completions:"

	n=0
	for bc in ${ROOT}/usr/share/bash-completion/* ; do
		[[ ${bc} == *~ || ! -e ${bc} ]] && continue

		bc="${bc##*/}"

		# skip completions that are already enabled
		local b a=0
		for b in ${enabled_bcs[@]} ; do
			[[ ${b} == "${bc}" ]] && { a=1 ; break ; }
		done
		[[ ${a} -eq 1 ]] && continue

		write_numbered_list_entry "$((++n))" "${bc}"
	done
}

### enable action ###

describe_enable() {
	echo "Enable specified completion(s)"
}

do_enable() {
	local bc bcdir="${ROOT}/${HOME}/.bash_completion.d"

	if [[ ${1} == "--global" ]] ; then
		bcdir="${ROOT}/etc/bash_completion.d"
		shift
	fi

	[[ -z ${1} ]] && die -q "You didn't specify any completions to enable."

	# create directory if necessary
	if [[ ! -d ${bcdir} && -w ${bcdir%/*} ]] ; then
		mkdir ${bcdir} || die -q "Failed to create ${bcdir}"
	elif [[ ! -d ${bcdir} ]] ; then
		die -q "You don't have permission to create ${bcdir}"
	fi

	# make sure we have proper permissions
	[[ -w ${bcdir} ]] || \
		die -q "You don't have permission to write to ${bcdir}"

	for bc in $@ ; do
		local file

		# ignore any unrecognized options
		[[ ${bc} == --* ]] && continue

		# what form is the argument in?
		case "${bc}" in
			# absolute path
			/*)
				file="${ROOT}/${bc}"
				;;
			# relative path
			*/*)
				file="${ROOT}/${PWD}/${bc}"
				;;
			# no path
			*)
				# CWD
				if [[ -f ${bc} ]] ; then
					file="${ROOT}/${PWD}/${bc}"
				# assume /usr/share/bash-completion
				else
					file="${ROOT}/usr/share/bash-completion/${bc}"
				fi
				;;
		esac

		# does it exist?
		if [[ ! -e ${file} ]] ; then
			write_error_msg "${file} doesn't exist"
			continue
		fi

		# already installed?
		if [[ -e ${bcdir}/${bc##*/} ]] ; then
			write_error_msg "${bc##*/} is already installed"
			continue
		fi

		# finally, create the symlink
		ln -s "${file}" "${bcdir}" || \
			die -q "Failed to create symlink from '${file}' to '${bcdir}'"
	done
}

### disable action ###

describe_disable() {
	echo "Disable specified completion(s)"
}

do_disable() {
	local bc bcdir="${ROOT}/${HOME}/.bash_completion.d"

	if [[ ${1} == "--global" ]] ; then
		bcdir="${ROOT}/etc/bash_completion.d"
		shift
	fi

	[[ -z ${1} ]] && die -q "You didn't specify any completions to disable"

	for bc in $@ ; do
		local file="${bcdir}/${bc}"

		# ignore any unrecognized options
		[[ ${bc} == --* ]] && continue

		# is in installed?
		if [[ ! -e ${file} ]] ; then
			write_error_msg "${bc} is not installed"
			continue
		fi

		# remove it if we have permissions
		if [[ -w ${file%/*} ]] ; then
			rm "${file}" || die -q "Failed to remove ${file}"
		else
			die -q "You don't have permission to remove ${file}"
		fi
	done
}

# vim: set ft=eclectic :
