# -*-eselect-*-  vim: ft=eselect
# Copyright 1999-2009 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$
# Author:  Martin Schlemmer <azarah@gentoo.org>
# Further modifications by Tomáš Chvátal <scarabeus@gentoo.org>
# Further modifications by Donnie Berkholz <dberkholz@gentoo.org>
# Further modifications based off submissions to bug #54984 <cyfred@gentoo.org>
# Further modifications by Jeremy Huddleston <eradicator@gentoo.org>
# Made into eselect module by Jeremy Huddleston <eradicator@gentoo.org>

inherit multilib package-manager config

# Eselect data
DESCRIPTION="Manage the OpenGL implementation used by your system"
MAINTAINER="x11@gentoo.org"
SVN_DATE='$Date$'
VERSION=$(svn_date_to_version "${SVN_DATE}" )
EBUILD_VERSION="1.0.9"

# Our data
ENV_FILE="${ROOT}/etc/env.d/03opengl"
PREFIX="${ROOT}/usr"
DST_PREFIX="${ROOT}/usr"

get_current_implementation() {
	local ret
	local ldpath=$(load_config "${ENV_FILE}" LDPATH)
	local opengl_profile=$(load_config "${ENV_FILE}" OPENGL_PROFILE)

	if [[ -n ${opengl_profile} ]] ; then
		ret="${opengl_profile}"
	elif [[ -n ${ldpath} ]] ; then
		ret="${ldpath%%:*}"
		ret="${ret##*opengl/}"
		ret="${ret%/lib*}"
	fi

	echo ${ret}
}

get_implementations() {
	local ret dir
	for x in $(list_libdirs) ; do
		[[ ${ROOT} != / ]] && x=${x//${ROOT}}
		for dir in "${PREFIX}/${x}"/opengl/* ; do
			[[ -d ${dir} && $(basename "${dir}") != "global" ]] || continue
			has $(basename "${dir}") ${ret} && continue
			ret=${ret:+${ret} }$(basename "${dir}")
		done
	done

	echo ${ret}
}

# 1: file
# 2: workdir
upgrade_file() {
	local file=$1
	local workdir=$2
	linkfile=$(relative_name ${file} ${workdir})

	[[ -f ${linkfile} ]] || continue
	if [[ -f $(basename "${linkfile}") || ( -L $(basename "${linkfile}") && ! -e $(basename "${linkfile}") ) ]] ; then
		rm -f "$(basename "${linkfile}")" || die -q "Failed to delete ${workdir}/$(basename ${linkfile})"
	fi

	ln -s "${linkfile}" || die -q "Failed to create symlink ${workdir}/$(basename ${linkfile})"
}

setup_lib_symlinks() {
	local profile_libdir=${1}
	local target=${2}
	local file

	mkdir -p "${target}" || die "Failed to create ${target}"

	pushd "${target}" &> /dev/null
		# Note that lafiles are removed here and never enabled again
		for file in libGL{,core}.{la} ; do
			rm -f "${file}" || die -q "Failed to delete ${file}"
		done

		# Note that we don't do .so*, just .so on purpose.  The
		# loader knows to look in the profile dir, and the
		# linked just needs the .so
		for file in ${profile_libdir}/libGL{,core}.{so,dylib,a}; do
			upgrade_file ${file} ${target}
		done
	popd &> /dev/null
}

setup_extensions_symlinks() {
	local src=$1
	local target=$2
	if [[ -e ${src} ]] ; then
		mkdir -p "${target}" || die "Failed to create ${target}"
		pushd "${target}" &> /dev/null
			# First remove old cruft symlinks
			for file in lib{wfb,glx,dri,dri2}.{a,dylib,so}; do
				rm -f "${file}" || die -q "Failed to delete ${targetdir}/${file}"
			done

			# regenerate symlinks
			for file in ${src}/*.{so,dylib,a}; do
				upgrade_file "${file}" "${target}"
			done
		popd &> /dev/null
	fi
}

setup_includes_symlinks() {
	target=$1
	includes_folder=$2
	globalincludes_folder=$3
	x11includes_folder=$4

	mkdir -p "${target}" || die "Failed to create ${DST_PREFIX}/include/GL"
	pushd "${target}" &> /dev/null
		for file in gl.h glx.h glxtokens.h glext.h glxext.h glxmd.h glxproto.h; do
			if [[ -e ${globalincludes_folder}/${file} ]] ; then
				upgrade_file "${globalincludes_folder}/${file}" "${target}"
			elif [[ -e ${includes_folder}/${file} ]] ; then
				upgrade_file "${includes_folder}/${file}" "${target}"
			elif [[ -e ${x11includes_folder}/${file} ]] ; then
				upgrade_file "${x11includes_folder}/${file}" "${target}"
			fi
		done
	popd &> /dev/null
}

set_new_implementation() {
	local gl_implem=${1}
	local avail_implems=$(get_implementations)

	# Set a sane umask... bug #83115
	umask 022

	if ! has ${gl_implem} ${avail_implems}; then
		die -q "Invalid opengl implementation selected."
	fi

	echo -n "Switching to ${gl_implem} OpenGL interface..."
		if [[ -f ${ENV_FILE} ]] ; then
			rm -f "${ENV_FILE}" || die -q "Failed to remove ${ENV_FILE}"
		fi

		local libdir
		for libdir in $(list_libdirs); do
			[[ ${ROOT} != / ]] && libdir=${libdir//${ROOT}}

			# First make sure we have an opengl directory and this is a real lib dir, not a symlink
			[[ -d ${PREFIX}/${libdir}/opengl && ! -h ${PREFIX}/${libdir} ]] || continue

			# Fallback on xorg-x11 if we don't have this implementation for this libdir.
			local gl_local
			if [[ ! -d ${PREFIX}/${libdir}/opengl/"${gl_implem}" ]] ; then
				gl_local="xorg-x11"
			else
				gl_local="${gl_implem}"
			fi

			setup_lib_symlinks "${PREFIX}/${libdir}/opengl/${gl_local}/lib" "${DST_PREFIX}/${libdir}"

			if [[ -e ${PREFIX}/${libdir}/opengl/${gl_local}/lib/tls ]] ; then
				setup_lib_symlinks "${PREFIX}/${libdir}/opengl/${gl_local}/lib/tls" "${DST_PREFIX}/${libdir}/tls"
			fi

			local moduledir
			if [[ -e ${DST_PREFIX}/${libdir}/xorg/modules ]] ; then
				moduledir="xorg/modules"
			else
				moduledir="modules"
			fi
			setup_extensions_symlinks "${PREFIX}/${libdir}/opengl/${gl_local}/extensions" "${DST_PREFIX}/${libdir}/${moduledir}/extensions"

			setup_includes_symlinks "${DST_PREFIX}/include/GL" "${PREFIX}/${libdir}/opengl/${gl_implem}/include/" "${PREFIX}/${libdir}/opengl/global/include/" "${PREFIX}/${libdir}/opengl/xorg-x11/include/"

			# Setup the $LDPATH
			ldpath="${ldpath:+${ldpath}:}${PREFIX}/${libdir}/opengl/${gl_local}/lib"

		done

		store_config ${ENV_FILE} LDPATH "${ldpath}"
		store_config ${ENV_FILE} OPENGL_PROFILE "${gl_implem}"

		do_action env update &> /dev/null

	echo " done"
}

### show action ###
describe_show() {
	echo "Print the current OpenGL implementation."
}

do_show() {
	local current=$(get_current_implementation)
	if [[ -n ${current} ]] ; then
		echo ${current}
		return 0
	else
		echo "(none)"
		return 2
	fi
}

### list action ###
describe_list() {
	echo "List the available OpenGL implementations."
}

do_list() {
	local i targets=( $(get_implementations) )
	write_list_start "Available OpenGL implementations:"
	for (( i = 0; i < ${#targets[@]}; i++ )); do
		[[ ${targets[i]} = $(get_current_implementation) ]] \
			&& targets[i]=$(highlight_marker "${targets[i]}")
	done
	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###
describe_set() {
	echo "Select the OpenGL implementation."
}

describe_set_parameters() {
	echo "<target>"
}

describe_set_options() {
	echo "<target> : The profile to activate"
	echo "--use-old : If an implementation is already set, use that one instead"
	echo "--prefix=<val> : Set the source prefix (default: /usr)"
	echo "--dst-prefix=<val> : Set the destination prefix (default: /usr)"
}

do_set() {
	local action="error"
	local current=$(get_current_implementation)
	local available=$(get_implementations)
	local new

	while [[ ${#@} -gt 0 ]] ; do
		local opt=${1}
		shift
		case ${opt} in
			--use-old)
				if [[ -n ${current} ]] && has ${current} ${available}; then
					action="old-implementation"
				fi
			;;
			--prefix=*)
				PREFIX=${ROOT}${opt#*=}
				available=$(get_implementations)
			;;
			--dst-prefix=*)
				DST_PREFIX=${ROOT}${opt#*=}
			;;
			*)
				if [[ ${action} != "old-implementation" ]] ; then
					action="set-implementation"
				fi

				if is_number ${opt} ; then
					targets=( $(get_implementations) )
					new=${targets[$(( ${opt} - 1 ))]}
					if [[ -z ${new} ]] ; then
						die -q "Unrecognized option: ${opt}"
					fi
				elif has ${opt} ${available}; then
					new="${opt}"
				else
					die -q "Unrecognized option: ${opt}"
				fi
			;;
		esac
	done

	case ${action} in
		old-implementation)
			set_new_implementation ${current}
			return $?
		;;
		set-implementation)
			if [[ -n ${new} ]] ; then
				set_new_implementation ${new}
				return $?
			else
				die -q "Please specify an implementation to set"
			fi
		;;
		*)
			die -q "Invalid usage of set action."
		;;
	esac
}
