# Copyright 2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$
# Author: Jeremy Huddleston <eradicator@gentoo.org>

# Eselect data
DESCRIPTION="Manage the installed compilers."
MAINTAINER="toolchain@gentoo.org"
SVN_DATE='$Date: 2005-09-13 19:53:00 -0700 (Tue, 13 Sep 2005) $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )
EBUILD_VERSION="2.0.0"

# Our data
ROOT=${ROOT:-/}
ENV="${ROOT}/etc/env.d/05compiler"
CONFIG_D="${ROOT}@configdir@"
WRAPPER="${ROOT}@evallibexecdir@/eselect/compiler/compiler-wrapper"
PROFILE_MANAGER="@evallibexecdir@/eselect/compiler/profile-manager"

show_extra_help_text() {
	write_list_start "Extra options for all actions:"
	write_kv_list_entry "-u, --user" "Use ${HOME}/@userconfigdir@ to override global settings."	
	echo ""
	write_list_start "Extra options for 'set' action:"
	write_kv_list_entry "-b, --bindir=<dir>" "Install the wrappers into this directory.  If -u is specified and this is not, no wrappers will be installed."
	write_kv_list_entry "-c, --chost=<chost>" "Install this profile using the specified CHOST rather than the default."
	write_kv_list_entry "-n, --native" "Make this the default CHOST."
}

eval_pm() {
	local tmp=$(mktemp)
	local retval

	${PROFILE_MANAGER} --config-dir="${CONFIG_D}" "${@}" > ${tmp}
	retval=${?}
	source ${tmp}
	rm -f ${tmp}
	return ${retval}
}

### list action ###
describe_list() {
	echo "List all installed compiler profiles."
}

do_list() {
	local chost
	local profiles_v
	local set_v
	local profile
	local i
	local active='*'
	local preopts=""

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--user|-u)
				preopts="${preopts} --user"
			;;
			*)
				die -q "Invalid option: ${opt}"
			;;
		esac
	done

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

	((i = 0))
	for chost in ${COMPILER_CONFIG_ALL_CHOSTS} ; do
		write_list_start "Available compilers for CHOST $(highlight "${chost}")"

		profiles_v="COMPILER_CONFIG_PROFILES_${chost//-/_}"
		for profile in ${!profiles_v} ; do
			((i++))
			write_numbered_list_entry $i "${profile}"
		done
	done

	echo ""

	write_list_start "Activated profiles:"
	for chost in ${COMPILER_CONFIG_SET_CHOSTS} ; do
		set_v="COMPILER_CONFIG_SET_${chost//-/_}"
		if [[ ${chost} == ${COMPILER_CONFIG_DEFAULT_CHOST} ]] ; then
			write_kv_list_entry "${chost} $(highlight "${active}")" "${!set_v}"
		else
			write_kv_list_entry "${chost}" "${!set_v}"
		fi
	done
}

### show action ###
describe_show() {
	echo "Print the current active configuration.  It can take a CTARGET argument"
}

do_show() {
	local chost
	local preopts=""

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--user|-u)
				preopts="${preopts} --user"
			;;
			*)
				chost=${opt}
			;;
		esac
	done

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

	if [[ -z ${chost} ]] ; then
		chost=${COMPILER_CONFIG_DEFAULT_CHOST}
	fi

	echo ${chost}

	local set_v="COMPILER_CONFIG_SET_${chost//-/_}"
	if [[ -n ${!set_v} ]] ; then
		echo ${!set_v}
		return 0
	else
		echo "(none)"
		return 2
	fi
}

### set action ###
describe_set() {
	echo "Select a compiler profile."
}

list_all_profiles() {
	local preopts="${@}"
	local chost
	local profiles_v
	local i=0

	for chost in ${COMPILER_CONFIG_ALL_CHOSTS} ; do
		if (( i == 0 )) ; then
			(( i++ ))
		else
			echo -n " "
		fi

		profiles_v="COMPILER_CONFIG_PROFILES_${chost//-/_}"
		echo -n ${!profiles_v}
	done

	echo ""
}

# Return the binaries in the passed directory, but don't include any with a CHOST prefix
# Currently this just extracts the prefix from the directory by assuming
# the directory matches */usr/<CHOST>/gcc-bin/*
# TODO: Cleanup to work better with non-gcc
get_bins() {
	local dir=${1}
	local file
	local basefile
	local prefix

	if [[ ${dir#*/usr/} != ${dir} && ${dir%/gcc-bin/*} != ${dir} ]] ; then
		prefix=${dir#*/usr/}
		prefix=${prefix%/gcc-bin/*}
	fi

	local i=0
	for file in ${dir}/* ; do
		basefile="$(basename ${file})"

		if [[ -x ${file} && ${basefile#${prefix}-} == ${basefile} ]] ; then
			if (( i == 0 )) ; then
				(( i++ ))
			else
				echo -n " "
			fi
			echo -n ${basefile}
		fi
	done
	echo ""
}

do_set() {
	local preopts postopts profile oldprofile chost bindir olddefaultbins oldbins newbins set_v userconf ref

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--bindir=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --bindir"
				fi
				bindir=${opt#*=}
			;;
			-b)
				if [[ ${#} -eq 0 ]] ; then
					die -q "No option given to -b"
				fi
				bindir=${1}
				shift
			;;
			--native|-n)
				postopts="${postopts} --native"
			;;
			--user|-u)
				userconf=1
				preopts="${preopts} --user"
			;;
			--chost=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --chost"
				fi
				chost=${opt#*=}
			;;
			-c)
				if [[ ${#} -eq 0 ]] ; then
					die -q "No option given to -c"
				fi
				chost=${1}
				shift
			;;
			*)
				if is_number ${opt} ; then
					profiles=( $(list_all_profiles ${preopts}) )
					profile=${profiles[$(( ${opt} - 1 ))]}
					if [[ -z ${profile} ]] ; then
						die -q "Invalid profile: ${opt}"
					fi
				else
					if ! has ${opt} $(list_all_profiles ${preopts}) ; then
						die -q "Invalid profile: ${opt}"
					fi
					profile=${opt}
				fi
			;;
		esac
	done

	if [[ -z ${profile} ]] ; then
		die -q "No profile given to set action."
	fi

	# Figure out the chost for this compiler
	if [[ -z ${chost} ]] ; then
		eval_pm ${preopts} get-profile ${profile} || die -q "Failed to get data on the desired profiles."
		chost=${COMPILER_CONFIG_CHOST}
	fi

	# Figure out what bins are installed for the default CHOST in case we are or are becoming default
	set_v="COMPILER_CONFIG_SET_${COMPILER_CONFIG_DEFAULT_CHOST}"
	if [[ -n ${!set_v} ]] ; then
		oldprofile=${!set_v}

		if eval_pm ${preopts} get-profile ${oldprofile} ; then
			olddefaultbins="$(get_bins "${ROOT}/${COMPILER_CONFIG_BINPATH}") ${COMPILER_CONFIG_ALIASES}"
		else
			write_error_msg "Could not get data on the previous profile for the default CHOST (${oldprofile})."
  		write_error_msg "You may have extra wrappers installed that you did not intend."
		fi
	fi

	# Figure out what bins are installed for the old profile for this CHOST
	set_v="COMPILER_CONFIG_SET_${chost//-/_}"
	if [[ -n ${!set_v} ]] ; then
		oldprofile=${!set_v}

		if eval_pm ${preopts} get-profile ${oldprofile} ; then
			oldbins="$(get_bins "${ROOT}/${COMPILER_CONFIG_BINPATH}") ${COMPILER_CONFIG_ALIASES}"
		else
			write_error_msg "Could not get data on the previous profile for this CHOST (${oldprofile})."
			write_error_msg "You may have extra wrappers installed for the old."
		fi
	fi

	# Update our profile for the wrapper
	${PROFILE_MANAGER} ${preopts} set ${profile} ${postopts} --chost=${chost} || die -q "Failed to save the new profile."

	# If we're updating the userconf, but not changing wrappers, leave now...
	if [[ ${userconf} == "1" && -z ${bindir} ]] ; then
		return 0
	fi

	# Get data on the new profile
	eval_pm ${preopts} get-profile ${profile} || die -q "Failed to get data on the desired profile after updating config."
	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles after updating config."

	# Select /usr/bin if the location isn't given to us
	if [[ -z ${bindir} ]] ; then
		bindir="${ROOT}/usr/bin"
	fi

	# Remove old wrappers
	if [[ ${chost} == ${COMPILER_CONFIG_DEFAULT_CHOST} ]] ; then
		for bin in ${olddefaultbins} ; do
			[[ -f ${bindir}/${bin} ]] && rm -f "${bindir}/${bin}"
		done
	fi
	for bin in ${oldbins} ; do
		[[ -f ${bindir}/${chost}-${bin} ]] && rm -f "${bindir}/${bin}"
	done

	# Install the wrappers
	set_bins ${chost} ${bindir}

	# Update /etc/env.d
	if [[ ${userconf} == "1" ]] ; then
		return 0
	fi

	set_env ${preopts} || die -q "Could not set ${ENV}"

	echo "Successfully set compiler for ${chost} to ${profile}."
}

# Setup the wrapper binaries for the passed CHOST
set_bins() {
	local chost="$1"
	local bindir="$2"
	local bin

	# Get data on the new profile
	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles after updating config."

	local set_v="COMPILER_CONFIG_SET_${chost//-/_}"
	local profile=${!set_v}

	[[ -z ${profile} ]] && return 1

	eval_pm ${preopts} get-profile ${profile} || die -q "Failed to get data on the desired profile after updating config."

	local newbins="$(get_bins "${ROOT}/${COMPILER_CONFIG_BINPATH}") ${COMPILER_CONFIG_ALIASES}"
	for bin in ${newbins} ; do
		# We want to figure out the 'reference file' for each 
		# wrapper (the binary we're 'wrapping') so that we can 
		# sync mtimes together.  This makes things like ccache
		# happy.  See Bug #70548 for more info.
		if has ${bin} ${COMPILER_CONFIG_ALIASES} ; then
			set_v="COMPILER_CONFIG_ALIAS_${bin}"
			ref="${ROOT}/${COMPILER_CONFIG_BINPATH}/${!set_v}"
		else
			ref="${ROOT}/${COMPILER_CONFIG_BINPATH}/${bin}"
		fi
		cp -f "${WRAPPER}" "${bindir}/${chost}-${bin}"
		touch -r "${ref}" "${bindir}/${chost}-${bin}"

		if [[ ${chost} == ${COMPILER_CONFIG_DEFAULT_CHOST} ]] ; then
			cp -f "${WRAPPER}" "${bindir}/${bin}"
			touch -r "${ref}" "${bindir}/${bin}"
		fi
	done
}

set_env() {
	local preopts="${@}"
	local env_manpath
	local env_infopath
	local env_ldpath
	local chost
	local set_v

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."
	# Build up the variables for all the active profiles
	for chost in ${COMPILER_CONFIG_SET_CHOSTS} ; do
		set_v="COMPILER_CONFIG_SET_${chost//-/_}"
		if eval_pm ${preopts} get-profile ${!set_v}; then
			[[ -n ${COMPILER_CONFIG_MANPATH} ]] &&
				env_manpath="${env_manpath:+"${env_manpath}:"}${COMPILER_CONFIG_MANPATH}"
			[[ -n ${COMPILER_CONFIG_INFOPATH} ]] &&
				env_infopath="${env_infopath:+"${env_infopath}:"}${COMPILER_CONFIG_INFOPATH}"
			[[ -n ${COMPILER_CONFIG_LDPATH} ]] &&
				env_ldpath="${env_ldpath:+"${env_ldpath}:"}${COMPILER_CONFIG_LDPATH}"
		else
			write_error_msg "Unable to get profile information for ${!set_v} which is set for CHOST ${chost}"
 		fi
	done

	# Now write it
	cat > ${ENV} <<EOF || die -q "Could not write to ${ENV}"
INFOPATH="${env_infopath}"
MANPATH="${env_manpath}"
LDPATH="${env_ldpath}"
EOF
}

### unset action
describe_unset() {
	echo "Deactivate a selected profile."
}

do_unset() {
	local bindir="${ROOT}/usr/bin"
	local preopts
	local chost

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--bindir=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --bindir"
				fi
				bindir=${opt#*=}
				;;
			--user|-u)
					userconf=1
					preopts="${preopts} --user"
				;;
			*)
				chost=${opt}
				;;
		esac
	done

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

	set_v="COMPILER_CONFIG_SET_${chost//-/_}"
	if eval_pm ${preopts} get-profile ${!set_v} ; then
		local bins="$(get_bins "${ROOT}/${COMPILER_CONFIG_BINPATH}") ${COMPILER_CONFIG_ALIASES}"
		local bin

		for bin in ${bins} ; do
			[[ -f ${bindir}/${chost}-${bin} ]] && rm -f "${bindir}/${chost}-${bin}"
			if [[ ${chost} == ${COMPILER_CONFIG_DEFAULT_CHOST} ]] ; then
				[[ -f ${bindir}/${bin} ]] && rm -f "${bindir}/${bin}"
			fi
		done
	else
		return 1
	fi

	return 0
}

### update action
describe_update() {
	echo "Refresh all the installed wrappers."
}

do_update() {
	local chost
	local bindir="${ROOT}/usr/bin"
	local preopts

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--bindir=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --bindir"
				fi
				bindir=${opt#*=}
				;;
			--user|-u)
				userconf=1
				preopts="${preopts} --user"
				;;
		esac
	done

	# Get data on the new profile
	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles after updating config."

	for chost in ${COMPILER_CONFIG_SET_CHOSTS} ; do
		set_bins ${chost} ${bindir}
	done
}
