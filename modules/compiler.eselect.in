# Copyright 2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$
# Author: Jeremy Huddleston <eradicator@gentoo.org>

# Eselect data
DESCRIPTION="Manage the installed compilers."
MAINTAINER="toolchain@gentoo.org"
SVN_DATE='$Date: 2005-09-13 19:53:00 -0700 (Tue, 13 Sep 2005) $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )
EBUILD_VERSION="2.0.0_beta2"

# Our data
ROOT=${ROOT:-/}
ENV_FILE="${ROOT}/etc/env.d/05compiler"
CONFIG_D="${ROOT}@configdir@"
WRAPPER="${ROOT}@evallibexecdir@/eselect/compiler/compiler-wrapper"
PROFILE_MANAGER="@evallibexecdir@/eselect/compiler/profile-manager"

show_extra_help_text() {
	write_list_start "Extra options for all actions:"
	write_kv_list_entry "-u, --user" "Use ${HOME}/@userconfigdir@ to override global settings."	
	echo ""
	write_list_start "Extra options for 'set' action:"
	write_kv_list_entry "-b, --bindir=<dir>" "Install the wrappers into this directory.  If -u is specified and this is not, no wrappers will be installed."
	write_kv_list_entry "-c, --ctarget=<CTARGET>" "Install this profile using the specified CTARGET rather than the default."
	write_kv_list_entry "-n, --native" "Make this the native CTARGET."
	echo
	write_list_start "Extra options for 'getval' action:"
	write_kv_list_entry "-c, --ctarget=<CTARGET>" "Get the variable for the active profile of the given CTARGET."
	write_kv_list_entry "-p, --profile=<PROFILE>" "Get the variable for the given profile."
	echo	
	write_list_start "Possible values to pass to 'getval' action:"
	write_kv_list_entry "BINPATH" "The location of the binaries."
	write_kv_list_entry "INFOPATH" "The location of the info documentation."
	write_kv_list_entry "MANPATH" "The location of the man pages."
	write_kv_list_entry "LDPATH" "The location of the libraries."
	write_kv_list_entry "STDCXX_INCDIR" "The stdcxx include dir."
	write_kv_list_entry "GCC_SPECS" "The specs file used."
	write_kv_list_entry "CFLAGS" "The CFLAGS that are automatically prepended."
}

### Helpers ###

eval_pm() {
	local tmp=$(mktemp)
	local retval

	${PROFILE_MANAGER} --config-dir="${CONFIG_D}" "${@}" > ${tmp}
	retval=${?}
	source ${tmp}
	rm -f ${tmp}
	return ${retval}
}

list_all_profiles() {
	local preopts="${@}"
	local ctarget
	local profiles_v
	local i=0

	for ctarget in ${COMPILER_CONFIG_ALL_CTARGETS} ; do
		if (( i == 0 )) ; then
			(( i++ ))
		else
			echo -n " "
		fi

		profiles_v="COMPILER_CONFIG_PROFILES_${ctarget//-/_}"
		echo -n ${!profiles_v}
	done

	echo ""
}

# Return the binaries in the passed directory, but don't include any with a CTARGET prefix
# Currently this just extracts the prefix from the directory by assuming
# the directory matches */usr/<CTARGET>/gcc-bin/*
# TODO: Cleanup to work better with non-gcc
get_bins() {
	local dir=${1}
	local file
	local basefile
	local prefix

	if [[ ${dir#*/usr/} != ${dir} && ${dir%/gcc-bin/*} != ${dir} ]] ; then
		prefix=${dir#*/usr/}
		prefix=${prefix%/gcc-bin/*}
	fi

	local i=0
	for file in ${dir}/* ; do
		basefile="$(basename ${file})"

		if [[ -x ${file} && ${basefile#${prefix}-} == ${basefile} ]] ; then
			if (( i == 0 )) ; then
				(( i++ ))
			else
				echo -n " "
			fi
			echo -n ${basefile}
		fi
	done
	echo ""
}

### ACTIONS ###

### list action ###
describe_list() {
	echo "List all installed compiler profiles."
}

do_list() {
	local ctarget
	local profiles_v
	local set_v
	local profile
	local i
	local active='*'
	local preopts=""

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--user|-u)
				preopts="${preopts} --user"
			;;
			*)
				die -q "Invalid option: ${opt}"
			;;
		esac
	done

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

	((i = 0))
	for ctarget in ${COMPILER_CONFIG_ALL_CTARGETS} ; do
		write_list_start "Available compilers for CTARGET $(highlight "${ctarget}")"

		profiles_v="COMPILER_CONFIG_PROFILES_${ctarget//-/_}"
		for profile in ${!profiles_v} ; do
			((i++))
			write_numbered_list_entry $i "${profile}"
		done
	done

	echo ""

	write_list_start "Activated profiles:"
	for ctarget in ${COMPILER_CONFIG_SET_CTARGETS} ; do
		set_v="COMPILER_CONFIG_SET_${ctarget//-/_}"
		if [[ ${ctarget} == ${COMPILER_CONFIG_DEFAULT_CTARGET} ]] ; then
			write_kv_list_entry "${ctarget} $(highlight "${active}")" "${!set_v}"
		else
			write_kv_list_entry "${ctarget}" "${!set_v}"
		fi
	done
}

### show action ###
describe_show() {
	echo "Print the current active configuration.  It can take a CTARGET argument"
}

do_show() {
	local ctarget
	local preopts=""

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--user|-u)
				preopts="${preopts} --user"
			;;
			*)
				ctarget=${opt}
			;;
		esac
	done

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

	if [[ -z ${ctarget} ]] ; then
		ctarget=${COMPILER_CONFIG_DEFAULT_CTARGET}
	fi

	local set_v="COMPILER_CONFIG_SET_${ctarget//-/_}"
	if [[ -n ${!set_v} ]] ; then
		echo ${!set_v}
		return 0
	else
		echo "(none)"
		return 2
	fi
}

### getval action ###
describe_getval() {
	echo "Print information for the given profile.  It takes a variable name as an argument."
}

do_getval() {
	local ctarget
	local profile
	local preopts
	local var
	local set_v

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--user|-u)
				preopts="${preopts} --user"
			;;
			--ctarget=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --ctarget"
				fi
				ctarget=${opt#*=}
			;;
			-c)
				if [[ ${#} -eq 0 ]] ; then
					die -q "No option given to -c"
				fi
				ctarget=${1}
				shift
			;;
			--profile=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --profile"
				fi
				profile=${opt#*=}
			;;
			-p)
				if [[ ${#} -eq 0 ]] ; then
					die -q "No option given to -p"
				fi
				profile=${1}
				shift
			;;
			*)
				var=${opt}
		esac
	done

	if [[ -n ${profile} && -n ${ctarget} ]] ; then
		die -q "You can't pass --profile and --ctarget at the same time."
	elif [[ -z ${profile} ]] ; then
		eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

		if [[ -z ${ctarget} ]] ; then
			ctarget=${COMPILER_CONFIG_DEFAULT_CTARGET}
		fi

		local set_v="COMPILER_CONFIG_SET_${ctarget//-/_}"
		[[ -z ${!set_v} ]] && die -q "Invalid CTARGET: ${ctarget}"

		profile=${!set_v}
	fi

	eval_pm ${preopts} get-profile ${profile} || die -q "Failed to get data on the profile '${profile}'."
	var="COMPILER_CONFIG_${var}"
	echo ${!var}

	return 0
}

### set action ###
describe_set() {
	echo "Select a compiler profile."
}

do_set() {
	local preopts postopts profile oldprofile ctarget bindir olddefaultbins oldbins newbins set_v userconf ref

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--bindir=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --bindir"
				fi
				bindir=${opt#*=}
			;;
			-b)
				if [[ ${#} -eq 0 ]] ; then
					die -q "No option given to -b"
				fi
				bindir=${1}
				shift
			;;
			--native|-n)
				postopts="${postopts} --native"
			;;
			--user|-u)
				userconf=1
				preopts="${preopts} --user"
			;;
			--ctarget=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --ctarget"
				fi
				ctarget=${opt#*=}
			;;
			-c)
				if [[ ${#} -eq 0 ]] ; then
					die -q "No option given to -c"
				fi
				ctarget=${1}
				shift
			;;
			*)
				if is_number ${opt} ; then
					profiles=( $(list_all_profiles ${preopts}) )
					profile=${profiles[$(( ${opt} - 1 ))]}
					if [[ -z ${profile} ]] ; then
						die -q "Invalid profile: ${opt}"
					fi
				else
					if ! has ${opt} $(list_all_profiles ${preopts}) ; then
						die -q "Invalid profile: ${opt}"
					fi
					profile=${opt}
				fi
			;;
		esac
	done

	if [[ -z ${profile} ]] ; then
		die -q "No profile given to set action."
	fi

	# Figure out the ctarget for this compiler
	if [[ -z ${ctarget} ]] ; then
		eval_pm ${preopts} get-profile ${profile} || die -q "Failed to get data on the desired profiles."
		ctarget=${COMPILER_CONFIG_CTARGET}
	fi

	# Figure out what bins are installed for the default CTARGET in case we are or are becoming default
	set_v="COMPILER_CONFIG_SET_${COMPILER_CONFIG_DEFAULT_CTARGET}"
	if [[ -n ${!set_v} ]] ; then
		oldprofile=${!set_v}

		if eval_pm ${preopts} get-profile ${oldprofile} ; then
			olddefaultbins="$(get_bins "${ROOT}/${COMPILER_CONFIG_BINPATH}") ${COMPILER_CONFIG_ALIASES}"
		else
			write_error_msg "Could not get data on the previous profile for the default CTARGET (${oldprofile})."
  		write_error_msg "You may have extra wrappers installed that you did not intend."
		fi
	fi

	# Figure out what bins are installed for the old profile for this CTARGET
	set_v="COMPILER_CONFIG_SET_${ctarget//-/_}"
	if [[ -n ${!set_v} ]] ; then
		oldprofile=${!set_v}

		if eval_pm ${preopts} get-profile ${oldprofile} ; then
			oldbins="$(get_bins "${ROOT}/${COMPILER_CONFIG_BINPATH}") ${COMPILER_CONFIG_ALIASES}"
		else
			write_error_msg "Could not get data on the previous profile for this CTARGET (${oldprofile})."
			write_error_msg "You may have extra wrappers installed for the old."
		fi
	fi

	# Update our profile for the wrapper
	${PROFILE_MANAGER} ${preopts} set ${profile} ${postopts} --ctarget=${ctarget} || die -q "Failed to save the new profile."

	# If we're updating the userconf, but not changing wrappers, leave now...
	if [[ ${userconf} == "1" && -z ${bindir} ]] ; then
		return 0
	fi

	# Get data on the new profile
	eval_pm ${preopts} get-profile ${profile} || die -q "Failed to get data on the desired profile after updating config."
	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles after updating config."

	# Select /usr/bin if the location isn't given to us
	if [[ -z ${bindir} ]] ; then
		bindir="${ROOT}/usr/bin"
	fi

	# Remove old wrappers
	if [[ ${ctarget} == ${COMPILER_CONFIG_DEFAULT_CTARGET} ]] ; then
		for bin in ${olddefaultbins} ; do
			[[ -f ${bindir}/${bin} ]] && rm -f "${bindir}/${bin}"
		done
	fi
	for bin in ${oldbins} ; do
		[[ -f ${bindir}/${ctarget}-${bin} ]] && rm -f "${bindir}/${bin}"
	done

	# Install the wrappers
	set_bins ${ctarget} ${bindir}

	# Update /etc/env.d
	if [[ ${userconf} == "1" ]] ; then
		return 0
	fi

	set_env ${preopts} || die -q "Could not set ${ENV_FILE}"

	echo "Successfully set compiler for ${ctarget} to ${profile}."
}

# Setup the wrapper binaries for the passed CTARGET
set_bins() {
	local ctarget="$1"
	local bindir="$2"
	local bin

	# Get data on the new profile
	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles after updating config."

	local set_v="COMPILER_CONFIG_SET_${ctarget//-/_}"
	local profile=${!set_v}

	[[ -z ${profile} ]] && return 1

	eval_pm ${preopts} get-profile ${profile} || die -q "Failed to get data on the desired profile after updating config."

	local newbins="$(get_bins "${ROOT}/${COMPILER_CONFIG_BINPATH}") ${COMPILER_CONFIG_ALIASES}"
	for bin in ${newbins} ; do
		# We want to figure out the 'reference file' for each 
		# wrapper (the binary we're 'wrapping') so that we can 
		# sync mtimes together.  This makes things like ccache
		# happy.  See Bug #70548 for more info.
		if has ${bin} ${COMPILER_CONFIG_ALIASES} ; then
			set_v="COMPILER_CONFIG_ALIAS_${bin}"
			ref="${ROOT}/${COMPILER_CONFIG_BINPATH}/${!set_v}"
		else
			ref="${ROOT}/${COMPILER_CONFIG_BINPATH}/${bin}"
		fi
		cp -f "${WRAPPER}" "${bindir}/${ctarget}-${bin}"
		touch -r "${ref}" "${bindir}/${ctarget}-${bin}"

		if [[ ${ctarget} == ${COMPILER_CONFIG_DEFAULT_CTARGET} ]] ; then
			cp -f "${WRAPPER}" "${bindir}/${bin}"
			touch -r "${ref}" "${bindir}/${bin}"
		fi
	done
}

set_env() {
	local preopts="${@}"
	local env_manpath
	local env_infopath
	local env_ldpath
	local ctarget
	local set_v

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."
	# Build up the variables for all the active profiles
	for ctarget in ${COMPILER_CONFIG_SET_CTARGETS} ; do
		set_v="COMPILER_CONFIG_SET_${ctarget//-/_}"
		if eval_pm ${preopts} get-profile ${!set_v}; then
			[[ -n ${COMPILER_CONFIG_MANPATH} ]] &&
				env_manpath="${env_manpath:+"${env_manpath}:"}${COMPILER_CONFIG_MANPATH}"
			[[ -n ${COMPILER_CONFIG_INFOPATH} ]] &&
				env_infopath="${env_infopath:+"${env_infopath}:"}${COMPILER_CONFIG_INFOPATH}"
			[[ -n ${COMPILER_CONFIG_LDPATH} ]] &&
				env_ldpath="${env_ldpath:+"${env_ldpath}:"}${COMPILER_CONFIG_LDPATH}"
		else
			write_error_msg "Unable to get profile information for ${!set_v} which is set for CTARGET ${ctarget}"
 		fi
	done

	# Now write it
	store_config ${ENV_FILE} INFOPATH "${env_infopath}"
	store_config ${ENV_FILE} MANPATH "${env_manpath}"
	store_config ${ENV_FILE} LDPATH "${env_ldpath}"
}

### unset action
describe_unset() {
	echo "Deactivate a selected profile."
}

do_unset() {
	local bindir="${ROOT}/usr/bin"
	local preopts
	local ctarget

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--bindir=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --bindir"
				fi
				bindir=${opt#*=}
				;;
			--user|-u)
					userconf=1
					preopts="${preopts} --user"
				;;
			*)
				ctarget=${opt}
				;;
		esac
	done

	if [[ -z ${ctarget} ]] ; then
		die -q "You did not give a CTARGET to unset."
	fi

	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles."

	if [[ ${ctarget} == ${COMPILER_CONFIG_DEFAULT_CTARGET} ]] ; then
		die -q "You cannot unset the native CTARGET.  Pleasse set another CTARGET native first."
	fi

	set_v="COMPILER_CONFIG_SET_${ctarget//-/_}"
	if eval_pm ${preopts} get-profile ${!set_v} ; then
		local bins="$(get_bins "${ROOT}/${COMPILER_CONFIG_BINPATH}") ${COMPILER_CONFIG_ALIASES}"
		local bin

		for bin in ${bins} ; do
			[[ -f ${bindir}/${ctarget}-${bin} ]] && rm -f "${bindir}/${ctarget}-${bin}"
			if [[ ${ctarget} == ${COMPILER_CONFIG_DEFAULT_CTARGET} ]] ; then
				[[ -f ${bindir}/${bin} ]] && rm -f "${bindir}/${bin}"
			fi
		done
	else
		return 1
	fi

	${PROFILE_MANAGER} ${preopts} unset ${ctarget} || die -q "Failed to unset the profile."

	return 0
}

### update action
describe_update() {
	echo "Refresh all the installed wrappers."
}

do_update() {
	local ctarget
	local bindir="${ROOT}/usr/bin"
	local preopts

	while [[ ${#} -gt 0 ]]; do
		local opt=${1}
		shift
		case ${opt} in
			--bindir=*)
				if [[ -z ${opt#*=} ]] ; then
					die -q "No option given to --bindir"
				fi
				bindir=${opt#*=}
				;;
			--user|-u)
				userconf=1
				preopts="${preopts} --user"
				;;
		esac
	done

	# Get data on the new profile
	eval_pm ${preopts} get-profiles || die -q "Failed to get data on installed profiles after updating config."

	for ctarget in ${COMPILER_CONFIG_SET_CTARGETS} ; do
		set_bins ${ctarget} ${bindir}
	done
}

### migrate action ###
describe_migrate() {
	echo "Convert gcc-1.x profiles.  This will not overwrite existing profiles."
}

do_migrate() {
	local envd="${ROOT}/etc/env.d/gcc/"
	local file

	[[ -d ${CONFIG_D} ]] || mkdir -p ${CONFIG_D}

	for file in ${envd}/* ; do
		[[ -f ${file} ]] || continue

		local basefile=$(basename ${file})

		# Skip the config files for now
		[[ ${basefile#config*} != ${basefile} ]] && continue

		local ctarget=$(split_old_gcc_ver "${basefile}" | cut -f1 -d' ')
		local version=$(split_old_gcc_ver "${basefile}" | cut -f2 -d' ')

		[[ -f "${CONFIG_D}/${ctarget}-${version}.conf" ]] || migrate_profile ${ctarget}-${version}
	done
	
	for file in ${envd}/config* ; do
		[[ -f ${file} ]] || continue

		local basefile=$(basename ${file})
		local ctarget

		local oldprofile=$(load_config "${file}" CURRENT)
		local prof_ctarget=$(split_old_gcc_ver  ${oldprofile} | cut -f1 -d' ')
		local version=$(split_old_gcc_ver  ${oldprofile} | cut -f2 -d' ')
		local spec=$(split_old_gcc_ver  ${oldprofile} | cut -f3 -d' ')
		[[ -z ${spec} ]] && spec="default"

		if [[ ${basefile} == "config" ]] ; then
			ctarget=$(split_old_gcc_ver  $(load_config "${file}" CURRENT) | cut -f1 -d' ')
			if [[ $(do_show) == "(none)" ]] ; then
				do_set "--ctarget=${ctarget}" "${prof_ctarget}-${version}/${spec}" --native
			fi
		else
			ctarget=${basefile#config-}
			if [[ $(do_show ${ctarget}) == "(none)" ]] ; then
				do_set "--ctarget=${ctarget}" "${prof_ctarget}-${version}/${spec}"
			fi
		fi

	done
}

migrate_profile() {
	local profile=$1
	local doneglobal=0
	local conf="${CONFIG_D}/${profile}.conf"
	local ctarget=$(split_old_gcc_ver ${profile} | cut -f1 -d' ')
	local val

	[[ -f  ${conf} ]] && return 1

	for file in ${envd}/${profile}* ; do
		if [[ ${doneglobal} == 0 ]] ; then
			local binpath=$(load_config "${file}" PATH)

			echo "[global]" > ${conf}
			echo "	version=${profile}" >> ${conf}
			echo "	binpath=${binpath}" >> ${conf}

			val=$(load_config "${file}" MANPATH)
			[[ -n ${val} ]] && echo "	manpath=${val}" >> ${conf}

			val=$(load_config "${file}" INFOPATH)
			[[ -n ${val} ]] && echo "	infopath=${val}" >> ${conf}

			val=$(load_config "${file}" STDCXX_INCDIR)
			[[ -n ${val} ]] && echo "	stdcxx_incdif=${val}" >> ${conf}

			echo "	alias_cc=gcc" >> ${conf}
			if [[ -f "${binpath}/${ctarget}-gfortran" || -f "${binpath}/gfortran" ]] ; then
				echo "	alias_g77=gfortran" >> ${conf}
			elif [[ -f "${binpath}/${ctarget}-g77" || -f "${binpath}/g77" ]] ; then
				echo "	alias_gfortran=g77" >> ${conf}
			fi

			echo >> ${conf}
			doneglobal=1
		fi

		local spec=$(split_old_gcc_ver $(basename ${file}) | cut -f3 -d' ')
		[[ -z ${spec} ]] && spec="default"

		echo "[${spec}]" >> ${conf}
		echo "	ctarget=${ctarget}" >> ${conf}

		val=$(load_config "${file}" LDPATH)
		[[ -n ${val} ]] && echo "	ldpath=${val}" >> ${conf}

		val=$(load_config "${file}" GCC_SPECS)
		[[ -n ${val} ]] && echo "	spec=${val}" >> ${conf}

		echo >> ${conf}
	done
}

# Taken from gcc-config-1.3.12:
split_old_gcc_ver() {
# Split up the gcc profile into components:
# TARGET-VER[-specs] -> TARGET VER [specs]
# arm-linux-3.3.6 -> arm-linux 3.3.6
# x86_64-linux-4.0.1-pre1234 -> x86_64-linux 4.0.1-pre1234
# sh-linux-3.4.4-hardened -> sh-linux 3.4.4 hardened
#
# So below we will start at the end and run a small state machine ...
# specs [3]
#    accept everything
# specs -> version transition [3->2]
#    when we find a version component
# version [2]
#    accept only version components (see the regex)
# version -> target transition [2->1]
#    when we hit a non version component
# target [1]
#    accept everything we have left
#
	echo "$@" | awk -F- '
	function pushit(onme, pushee) {
		return (onme == "" ? pushee : pushee"-"onme);
	}
	{
		state=3
		targ=""
		ver=""
		spec=""
		for (i=NF; i > 0; --i) {
			if (state >= 2) {
				if ($i ~ /^(alpha|beta|pre|rc|p)?[[:digit:].]+$/) {
					ver=pushit(ver, $i)
					state=2
				} else if (state == 3)
					spec=pushit(spec, $i)
				else
					state=1
			}
			if (state == 1)
				targ = pushit(targ, $i)
		}
		print targ " " ver (spec != "" ? " " spec : "")
	}'
}
