# -*-eselect-*-  vim: ft=eselect
# Copyright 1999-2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$

DESCRIPTION="Manage the configuration of dictionaries for OpenOffice.Org."
MAINTAINER="kevquinn@gentoo.org"
SVN_DATE='$Date$'
VERSION=$(svn_date_to_version "${SVN_DATE}" )

# TODO
# 1) implement eselect oodict unset direct-<lang>
# 2) make eselect oodict unset myspell-<lang> abort cleanly if not installed from
# myspell

# Supports myspell(hunspell) dictionaries; designed to be extensible to
# manage other classes of dictionaries should they become applicable
# to OpenOffice.org.

# Base directory where OpenOffice stores its dictionary information.
# Default is non-multilib /usr/lib - if given, the --libdir option changes
# this to the supplied library subdirectory name.
OOO_DICTBASE="/usr/lib/openoffice/share/dict/ooo"
OOO_DICTLIST="dictionary.lst"

OODICT_CLASSES="myspell"

MYSPELL_BASE="/usr/share/myspell"

# set array "fields" to the elements of $1, separated by $2.
# This saves having to muck about with IFS all over the place.
oodict_set_fields() {
	local old_IFS
	old_IFS="${IFS}"
	IFS=$2
	fields=($1)
	IFS="${old_IFS}"
}

# dictionary names are <class>-<lang>
oodict_get_lang() {
	local fields
	oodict_set_fields "${P}" "-"
	echo ${fields[1]}
}

# return suffixes for dictionary type; spelling dictionary,
# hyphenation dictionary and thesaurus.
oodict_get_myspell_suffixes() {
	case $1 in
		DICT) echo ".aff .dic" ;;
		HYPH) echo ".dic" ;;
		THES) echo ".dat .idx" ;;
	esac
}

# display a heading (indented 4 spaces) and a wrapped list of
# language codes (indented 6 spaces)
oodict_display_langs() {
	local count lang
	echo "    $1:"
	shift
	if [[ $1 == "" ]]; then
		echo "      (none)"
	else
		count=0
		for lang in $*; do
			[[ ${count} == 0 ]] && printf "     "
			printf " %s" ${lang}
			((count = count+1))
			[[ ${count} == 22 ]] && printf "\n" && count=0
		done
		[[ ${count} == 0 ]] || printf "\n"
	fi
}

# Create OpenOffice.org dictionary list file if it does not exist
oodict_create_dictlist() {
	[[ -f ${OOO_DICTBASE}/${OOO_DICTLIST} ]] && return
	# Ensure OOo dictionary area exists
	[[ -d ${OOO_DICTBASE} ]] || mkdir -p ${OOO_DICTBASE}
	touch ${OOO_DICTBASE}/${OOO_DICTLIST} ||
		die "Unable to create ${OOO_DICTBASE}/${OOO_DICTLIST}"
	# Format of dictionary.lst files is from OOo standard
	# dictionary.lst file:
	cat > ${OOO_DICTBASE}/${OOO_DICTLIST} <<EOF
# List of All Dictionaries to be Loaded by OpenOffice
# ---------------------------------------------------
# Each Entry in the list have the following space delimited fields
#
# Field 0: Entry Type "DICT" - spellchecking dictionary
#                     "HYPH" - hyphenation dictionary
#                     "THES" - thesaurus files
#
# Field 1: Language code from Locale "en" or "de" or "pt" ...
#
# Field 2: Country Code from Locale "US" or "GB" or "PT"
#
# Field 3: Root name of file(s) "en_US" or "hyph_de" or "th_en_US"
#          (do not add extensions to the name)

EOF
}

# Format of MYSPELL_[SPELLING|HYPHENATION|THESAURUS]_DICTIONARIES:
#
# Field 0: Language code
# Field 1: Country code
# Field 2: Root name of dictionary files
# Field 3: Description
# Field 4: Archive filename
#
# This format is from the available.lst, hyphavail.lst and
# thesavail.lst files on the openoffice.org repository.


oodict_describe_options() {
	echo "--libdir <libdir>: OpenOffice.org library subdirectory is <libdir>, e.g. lib32 (default 'lib')"
}

# Process options
# Notes:
# 1) this dies if it sees an option it doesn't understand.
# 2) Copy and consume (shift) parameters before calling this, otherwise it
#    considers extra parameters as potential options.
oodict_process_options() {
	while [[ -n $1 && "--" != ${1:0:2} ]]; do
		shift
	done
	while [[ "--" == ${1:0:2} ]]; do
		if [[ "--libdir" == $1 ]]; then
			shift
			OOO_DICTBASE="/usr/$1/openoffice/share/dict/ooo"
			libdir=$1
			shift
		elif [[ "--" == $1 ]]; then
			break
		else
			die -q "Unknown parameter ${1}"
		fi
	done
}


### show action

## {{{ show stuff
describe_show() {
	echo "Show which dictionaries are configured for use with OpenOffice.org."
}

describe_show_options() {
	oodict_describe_options
}

do_show() {
	local lang myspell_sources listn suffix
	oodict_process_options $*
	write_list_start "OpenOffice.org configured dictionaries"
	if [[ ! -f ${OOO_DICTBASE}/${OOO_DICTLIST} ]]; then
		echo "  (none)"
		return
	fi
	listn=1
	# myspell dictionary source
	lang=""
	myspell_sources=""
	direct_sources=""
	while read entry; do
		fields=(${entry})
		[[ ${fields[0]:0:1} == "#" ]] && continue
		lang=${fields[1]}
		for suffix in $(oodict_get_myspell_suffixes ${fields[0]}); do
			if [[ -h ${OOO_DICTBASE}/${fields[3]}${suffix} ]]; then
				src=$(canonicalise ${OOO_DICTBASE}/${fields[3]}${suffix})
				if [[ ${src/${MYSPELL_BASE}} != ${src} ]]; then
					has ${lang} ${myspell_sources} ||
						myspell_sources="${myspell_sources} ${lang}"
				else
					write_warning_msg "unrecognised link to ${src} ignored"
				fi
			else
				has ${lang} ${direct_sources} ||
					direct_sources="${direct_sources} ${lang}"
			fi
		done
	done <<-EOF
		$(sort --key=2 ${OOO_DICTBASE}/${OOO_DICTLIST})
	EOF
	if [[ -n ${myspell_sources} ]]; then
		write_numbered_list_entry ${listn} "myspell"
		oodict_display_langs "Configured language codes from ${MYSPELL_BASE}" ${myspell_sources}
		(( listn = ${listn} + 1 ))
	fi
	if [[ -n ${direct_sources} ]]; then
		write_numbered_list_entry ${listn} "direct"
		oodict_display_langs "Language codes installed directly in ${OOO_DICTBASE}" ${direct_sources}
		(( listn = ${listn} + 1 ))
	fi
	# show none if no sources found
	[[ ${listn} == "1" ]] && echo "  (none)"
}
## }}}


### list action

## {{{ list stuff
describe_list() {
	echo "List the dictionaries that can be configured for use with OpenOffice."
}

do_list() {
	local known_langs dict dictlist listn
	write_list_start "Installed dictionary sources that can be set:"
	listn=1
	# myspell dictionary source
	dictlist=$(ls ${MYSPELL_BASE}/${OOO_DICTLIST}.* 2> /dev/null)
	if [[ -n ${dictlist} ]]; then
		write_numbered_list_entry ${listn} "myspell"
		known_langs=""
		for dict in ${MYSPELL_BASE}/${OOO_DICTLIST}.*; do
			known_langs="${known_langs} ${dict/${MYSPELL_BASE}\/${OOO_DICTLIST}.}"
		done
		oodict_display_langs "Installed language codes" ${known_langs}
		(( listn = ${listn} + 1 ))
	fi
	# show none if no sources found
	[[ ${listn} == "1" ]] && echo "  (none)"
}
## }}}


### unset action

## {{{ unset stuff
describe_unset() {
	echo "Unconfigure a dictionary from use with OpenOffice.org."
}

describe_unset_parameters() {
	echo "<dictionary>"
}

describe_unset_options() {
	echo "dictionary: <class>-<lang> e.g. myspell-en"
	oodict_describe_options
}

do_unset() {
	# Check OOo dictionary area exists
	local dict dlang dclass suffix filen dictlst entry fields
	oodict_process_options $*
	[[ -d ${OOO_DICTBASE} ]] || return
	[[ -f  ${OOO_DICTBASE}/${OOO_DICTLIST} ]] || return
	dict=$1
	dlang=${dict/*-}
	dclass=${dict/-*}
	dictlst="${OOO_DICTLIST}.${dlang}"
	notmyfiles=""
	case ${dclass} in
	myspell)
		# Remove softlinks and entries in dictionary.lst - uses
		# dictionary.<lang>.lst from /usr/share/myspell
		if [[ -f ${MYSPELL_BASE}/${dictlst} ]]; then
			while read entry; do
				fields=(${entry})
				[[ ${fields[0]:0:1} == "#" ]] && continue
				[[ ${fields[3]} == "" ]] && continue
				# Remove entry from dictionary.lst
				sed -i -e "/^${fields[0]} ${fields[1]} ${fields[2]} ${fields[3]}$/ { d }" \
					${OOO_DICTBASE}/${OOO_DICTLIST} ||
						die "Could not edit ${OOO_DICTBASE}/${OOO_DICTLIST}"
				# See if any other entries in dictionary.lst match the current
				# dictionary class and filename
				grep "^${fields[0]} .* ${fields[3]}$" ${OOO_DICTBASE}/${OOO_DICTLIST} \
					2>&1 > /dev/null && continue
				# If no other entries match, remove relevant symlinks
				for suffix in $(oodict_get_myspell_suffixes ${fields[0]}); do
					filen="${fields[3]}${suffix}"
					[[ -f ${OOO_DICTBASE}/${filen} ]] &&
					if [[ -h ${OOO_DICTBASE}/${filen} ]]; then
						rm -f ${OOO_DICTBASE}/${filen} ||
						die "Failed to remove ${OOO_DICTBASE}/${filen}"
					else
						has ${filen} ${notmyfiles} ||
							notmyfiles="${notmyfiles} ${filen}"
					fi
				done
			done < ${MYSPELL_BASE}/${dictlst}
		else
			write_warning_msg "source ${dict} is not installed; nothing changed"
		fi
		[[ -n ${notmyfiles} ]] &&
			write_warning_msg \
				"Files ${notmyfiles} in ${OOO_DICTBASE} were not previously " \
				"installed by eselect oodict.  Remove them manually if you" \
				"are sure you do not want them."
		;;
	direct)
		write_warning_msg \
			"eselect oodict does not manage files installed directly to " \
			"${OOO_DICTBASE}.  Remove them manually."
		;;
	*)
		die "Unknown dictionary class ${dclass}"
		;;
	esac
}
## }}}

### set action

## {{{ set stuff
describe_set() {
	echo "Configure a dictionary for use with OpenOffice.org."
}

describe_set_parameters() {
	echo "<dictionary>"
}

describe_set_options() {
	echo "dictionary: <class>-<lang> e.g. myspell-en"
	oodict_describe_options
}

do_set() {
	local dict dlang dclass filen dictlst entry fields suffix
	oodict_process_options $*
	dict=$1
	dlang=${dict/*-}
	dclass=${dict/-*}
	dictlst="${OOO_DICTLIST}.${dlang}"
	alreadyexists=""
	case ${dclass} in
	myspell)
		# Set new entries & links
		[[ -f ${MYSPELL_BASE}/${dictlst} ]] ||
			die "Dictionary ${dict} not found in ${MYSPELL_BASE}"
		# Create OOo dictionary list file if it doesn't already exist
		oodict_create_dictlist
		# Check for already existing files
		while read entry; do
			fields=(${entry})
			[[ ${fields[0]:0:1} == "#" ]] && continue
			for suffix in $(oodict_get_myspell_suffixes ${fields[0]}); do
				filen="${fields[3]}${suffix}"
				if [[ ! -h ${OOO_DICTBASE}/${filen} ]] &&
				   [[ -f ${OOO_DICTBASE}/${filen} ]]; then
					has ${filen} ${alreadyexists} ||
						alreadyexists="${alreadyexists} ${filen}"
				fi
			done
		done < ${MYSPELL_BASE}/${dictlst}
		if [[ -n ${alreadyexists} ]]; then
			write_warning_msg \
				"Files${alreadyexists} in ${OOO_DICTBASE} already exist." \
				"Remove them manually and re-run eselect oodict to put them" \
				"under eselect management."
		else
			# Clear out any existing entry
			do_unset ${dict}
			while read entry; do
				fields=(${entry})
				[[ ${fields[0]:0:1} == "#" ]] && continue
				grep "^${fields[0]} ${fields[1]} ${fields[2]} ${fields[3]}$" \
					${OOO_DICTBASE}/${OOO_DICTLIST} > /dev/null 2>&1 ||
						echo "${entry}" >> ${OOO_DICTBASE}/${OOO_DICTLIST}
				for suffix in $(oodict_get_myspell_suffixes ${fields[0]}); do
					filen="${fields[3]}${suffix}"
					if [[ -h ${OOO_DICTBASE}/${filen} ]]; then
						rm -f ${OOO_DICTBASE}/${filen} ||
							die "Failed to remove ${OOO_DICTBASE}/${filen}"
					fi
					if [[ ! -f ${OOO_DICTBASE}/${filen} ]]; then
						ln -s ${MYSPELL_BASE}/${filen} ${OOO_DICTBASE}/${filen} ||
							die "Failed to create symlink from ${MYSPELL_BASE}/${filen} to ${OOO_DICTBASE}/${filen}"
					else
						has ${filen} ${alreadyexists} ||
							alreadyexists="${alreadyexists} ${filen}"
					fi
				done
			done < ${MYSPELL_BASE}/${dictlst}
		fi
		;;
	direct)
		write_warning_msg "eselect oodict does not manage files installed directly to ${OOO_DICTBASE}."
		;;
	*)
		die "Unknown dictionary class ${dict}"
		;;
	esac
}
## }}}


### update action

## {{{ update stuff
describe_update() {
	echo "(Re)build OpenOffice.org dictionary configuration."
}

describe_update_parameters() {
	echo "[<class>]"
}

describe_update_options() {
	echo "class: type of dictionary (e.g. ${OODICT_CLASSES/ /, }) - omit to update everything"
	oodict_describe_options
}

do_update() {
	local dlang class dictlst classes
	oodict_process_options $*
	# <class> is an optional parameter
	classes=$1
	[[ -z ${classes} || "--" == ${classes:0:2} ]] &&
		classes=${OODICT_CLASSES}
	for class in ${classes}; do
		case ${class} in
		myspell)
			dictlsts=$(ls ${MYSPELL_BASE}/${OOO_DICTLIST}.* 2> /dev/null)
			for dictlst in ${dictlsts}; do
				dlang=${dictlst/*.lst.}
				do_set ${class}-${dlang}
			done
			;;
		*)
			die "Unknown dictionary class ${class}"
			;;
		esac
	done
}
## }}}
