#!/bin/bash

# Copyright (c) 2005 Gentoo Foundation.
# $Header$
# This file is part of the 'eselect' tools framework.
#
# eselect is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# eselect is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# eselect; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

# store_config module key value PUBLIC
# Stores a $key/$value pair for given module in /etc/eselect/$module
store_config() {
    # we need at least "module" and "key"
    [[ ${#@} -gt 2 ]] || die
    local module=${1} key=${2} value content vars line="" changed=0
    shift 2
    value=${@}

    if [[ ! -e ${ROOT}/etc/eselect/${module} ]] ; then
        mkdir -p ${ROOT}/etc/eselect/${module} \
            || die -q \
            "Couldn't create directory ${ROOT}/etc/eselect/${module}"
    fi
    
    store_config_header() {
        echo "# Configuration file for eselect's '${module}' module" \
            > ${ROOT}/etc/eselect/${module}/${module}.config
        echo "# This file has been automatically generated." \
            >> ${ROOT}/etc/eselect/${module}/${module}.config
    }

    if [[ ! -f ${ROOT}/etc/eselect/${module}/${module}.config ]] ; then
        store_config_header
        echo "${key}=\"${value}\"" \
	    >> ${ROOT}/etc/eselect/${module}/${module}.config
        return
    fi
        
    content=$(<${ROOT}/etc/eselect/${module}/${module}.config)

    if [[ -z ${content[@]} ]] ; then
        store_config_header
        echo "${key}=\"${value}\"" \
	    >> ${ROOT}/etc/eselect/${module}/${module}.config
        return
    fi

    # parse the names of all settings in the file
    for line in ${content[@]} ; do
        [[ ${line/=/} != ${line} ]] || continue
        line=${line/=*/}
        local ${line}=""
        vars=(${vars[@]} ${line})
    done

    source ${ROOT}/etc/eselect/${module}/${module}.config

    store_config_header
    for var in ${vars[@]} ; do
	if [[ ${var} == ${key} ]] ; then
            echo "${var}=\"${value}\"" \
                >> ${ROOT}/etc/eselect/${module}/${module}.config
	    changed=1
	else
            echo "${var}=\"${!var}\"" \
                >> ${ROOT}/etc/eselect/${module}/${module}.config
	fi
    done
    [[ ${changed} == 1 ]] \
    	|| echo "${key}=\"${value}\"" \
        >> ${ROOT}/etc/eselect/${module}/${module}.config
}

# load_config module key PUBLIC
# Loads $key value from /etc/eselect/$module
load_config() {
    [[ ${#@} -eq 2 ]] || die
    local module key value

    module=${1}
    key=${2}
    [[ ! -e ${ROOT}/etc/eselect/${module}/${module}.config ]] \
        && return 1
    value=$(
        source ${ROOT}/etc/eselect/${module}/${module}.config
    	echo ${!key}
    )
    echo ${value}
}

# add_config module key item ... PUBLIC
# Adds $item to already stored value of $key in /etc/eselect/$module
add_config() {
    [[ ${#@} -gt 2 ]] || die
    local module=${1} key=${2} item oldvalue newvalue
    shift 2
    item="$@"
    oldvalue=$(load_config ${module} ${key})
    newvalue=( ${oldvalue[@]} ${item} )
    store_config ${module} ${key} ${newvalue[@]}
}

# vim: set sw=4 et sts=4 tw=80 :
